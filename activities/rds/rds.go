// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package rds

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/rds"
	"github.com/aws/aws-sdk-go/service/rds/rdsiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client rdsiface.RDSAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := rds.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (rdsiface.RDSAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return rds.New(sess), nil
}

func (a *Activities) AddRoleToDBCluster(ctx context.Context, input *rds.AddRoleToDBClusterInput) (*rds.AddRoleToDBClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AddRoleToDBClusterWithContext(ctx, input)
}

func (a *Activities) AddRoleToDBInstance(ctx context.Context, input *rds.AddRoleToDBInstanceInput) (*rds.AddRoleToDBInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AddRoleToDBInstanceWithContext(ctx, input)
}

func (a *Activities) AddSourceIdentifierToSubscription(ctx context.Context, input *rds.AddSourceIdentifierToSubscriptionInput) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AddSourceIdentifierToSubscriptionWithContext(ctx, input)
}

func (a *Activities) AddTagsToResource(ctx context.Context, input *rds.AddTagsToResourceInput) (*rds.AddTagsToResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AddTagsToResourceWithContext(ctx, input)
}

func (a *Activities) ApplyPendingMaintenanceAction(ctx context.Context, input *rds.ApplyPendingMaintenanceActionInput) (*rds.ApplyPendingMaintenanceActionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ApplyPendingMaintenanceActionWithContext(ctx, input)
}

func (a *Activities) AuthorizeDBSecurityGroupIngress(ctx context.Context, input *rds.AuthorizeDBSecurityGroupIngressInput) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AuthorizeDBSecurityGroupIngressWithContext(ctx, input)
}

func (a *Activities) BacktrackDBCluster(ctx context.Context, input *rds.BacktrackDBClusterInput) (*rds.BacktrackDBClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.BacktrackDBClusterWithContext(ctx, input)
}

func (a *Activities) CancelExportTask(ctx context.Context, input *rds.CancelExportTaskInput) (*rds.CancelExportTaskOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CancelExportTaskWithContext(ctx, input)
}

func (a *Activities) CopyDBClusterParameterGroup(ctx context.Context, input *rds.CopyDBClusterParameterGroupInput) (*rds.CopyDBClusterParameterGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CopyDBClusterParameterGroupWithContext(ctx, input)
}

func (a *Activities) CopyDBClusterSnapshot(ctx context.Context, input *rds.CopyDBClusterSnapshotInput) (*rds.CopyDBClusterSnapshotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CopyDBClusterSnapshotWithContext(ctx, input)
}

func (a *Activities) CopyDBParameterGroup(ctx context.Context, input *rds.CopyDBParameterGroupInput) (*rds.CopyDBParameterGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CopyDBParameterGroupWithContext(ctx, input)
}

func (a *Activities) CopyDBSnapshot(ctx context.Context, input *rds.CopyDBSnapshotInput) (*rds.CopyDBSnapshotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CopyDBSnapshotWithContext(ctx, input)
}

func (a *Activities) CopyOptionGroup(ctx context.Context, input *rds.CopyOptionGroupInput) (*rds.CopyOptionGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CopyOptionGroupWithContext(ctx, input)
}

func (a *Activities) CreateCustomAvailabilityZone(ctx context.Context, input *rds.CreateCustomAvailabilityZoneInput) (*rds.CreateCustomAvailabilityZoneOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateCustomAvailabilityZoneWithContext(ctx, input)
}

func (a *Activities) CreateDBCluster(ctx context.Context, input *rds.CreateDBClusterInput) (*rds.CreateDBClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateDBClusterWithContext(ctx, input)
}

func (a *Activities) CreateDBClusterEndpoint(ctx context.Context, input *rds.CreateDBClusterEndpointInput) (*rds.CreateDBClusterEndpointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateDBClusterEndpointWithContext(ctx, input)
}

func (a *Activities) CreateDBClusterParameterGroup(ctx context.Context, input *rds.CreateDBClusterParameterGroupInput) (*rds.CreateDBClusterParameterGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateDBClusterParameterGroupWithContext(ctx, input)
}

func (a *Activities) CreateDBClusterSnapshot(ctx context.Context, input *rds.CreateDBClusterSnapshotInput) (*rds.CreateDBClusterSnapshotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateDBClusterSnapshotWithContext(ctx, input)
}

func (a *Activities) CreateDBInstance(ctx context.Context, input *rds.CreateDBInstanceInput) (*rds.CreateDBInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateDBInstanceWithContext(ctx, input)
}

func (a *Activities) CreateDBInstanceReadReplica(ctx context.Context, input *rds.CreateDBInstanceReadReplicaInput) (*rds.CreateDBInstanceReadReplicaOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateDBInstanceReadReplicaWithContext(ctx, input)
}

func (a *Activities) CreateDBParameterGroup(ctx context.Context, input *rds.CreateDBParameterGroupInput) (*rds.CreateDBParameterGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateDBParameterGroupWithContext(ctx, input)
}

func (a *Activities) CreateDBProxy(ctx context.Context, input *rds.CreateDBProxyInput) (*rds.CreateDBProxyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateDBProxyWithContext(ctx, input)
}

func (a *Activities) CreateDBSecurityGroup(ctx context.Context, input *rds.CreateDBSecurityGroupInput) (*rds.CreateDBSecurityGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateDBSecurityGroupWithContext(ctx, input)
}

func (a *Activities) CreateDBSnapshot(ctx context.Context, input *rds.CreateDBSnapshotInput) (*rds.CreateDBSnapshotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateDBSnapshotWithContext(ctx, input)
}

func (a *Activities) CreateDBSubnetGroup(ctx context.Context, input *rds.CreateDBSubnetGroupInput) (*rds.CreateDBSubnetGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateDBSubnetGroupWithContext(ctx, input)
}

func (a *Activities) CreateEventSubscription(ctx context.Context, input *rds.CreateEventSubscriptionInput) (*rds.CreateEventSubscriptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateEventSubscriptionWithContext(ctx, input)
}

func (a *Activities) CreateGlobalCluster(ctx context.Context, input *rds.CreateGlobalClusterInput) (*rds.CreateGlobalClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateGlobalClusterWithContext(ctx, input)
}

func (a *Activities) CreateOptionGroup(ctx context.Context, input *rds.CreateOptionGroupInput) (*rds.CreateOptionGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateOptionGroupWithContext(ctx, input)
}

func (a *Activities) DeleteCustomAvailabilityZone(ctx context.Context, input *rds.DeleteCustomAvailabilityZoneInput) (*rds.DeleteCustomAvailabilityZoneOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteCustomAvailabilityZoneWithContext(ctx, input)
}

func (a *Activities) DeleteDBCluster(ctx context.Context, input *rds.DeleteDBClusterInput) (*rds.DeleteDBClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteDBClusterWithContext(ctx, input)
}

func (a *Activities) DeleteDBClusterEndpoint(ctx context.Context, input *rds.DeleteDBClusterEndpointInput) (*rds.DeleteDBClusterEndpointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteDBClusterEndpointWithContext(ctx, input)
}

func (a *Activities) DeleteDBClusterParameterGroup(ctx context.Context, input *rds.DeleteDBClusterParameterGroupInput) (*rds.DeleteDBClusterParameterGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteDBClusterParameterGroupWithContext(ctx, input)
}

func (a *Activities) DeleteDBClusterSnapshot(ctx context.Context, input *rds.DeleteDBClusterSnapshotInput) (*rds.DeleteDBClusterSnapshotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteDBClusterSnapshotWithContext(ctx, input)
}

func (a *Activities) DeleteDBInstance(ctx context.Context, input *rds.DeleteDBInstanceInput) (*rds.DeleteDBInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteDBInstanceWithContext(ctx, input)
}

func (a *Activities) DeleteDBInstanceAutomatedBackup(ctx context.Context, input *rds.DeleteDBInstanceAutomatedBackupInput) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteDBInstanceAutomatedBackupWithContext(ctx, input)
}

func (a *Activities) DeleteDBParameterGroup(ctx context.Context, input *rds.DeleteDBParameterGroupInput) (*rds.DeleteDBParameterGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteDBParameterGroupWithContext(ctx, input)
}

func (a *Activities) DeleteDBProxy(ctx context.Context, input *rds.DeleteDBProxyInput) (*rds.DeleteDBProxyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteDBProxyWithContext(ctx, input)
}

func (a *Activities) DeleteDBSecurityGroup(ctx context.Context, input *rds.DeleteDBSecurityGroupInput) (*rds.DeleteDBSecurityGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteDBSecurityGroupWithContext(ctx, input)
}

func (a *Activities) DeleteDBSnapshot(ctx context.Context, input *rds.DeleteDBSnapshotInput) (*rds.DeleteDBSnapshotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteDBSnapshotWithContext(ctx, input)
}

func (a *Activities) DeleteDBSubnetGroup(ctx context.Context, input *rds.DeleteDBSubnetGroupInput) (*rds.DeleteDBSubnetGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteDBSubnetGroupWithContext(ctx, input)
}

func (a *Activities) DeleteEventSubscription(ctx context.Context, input *rds.DeleteEventSubscriptionInput) (*rds.DeleteEventSubscriptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteEventSubscriptionWithContext(ctx, input)
}

func (a *Activities) DeleteGlobalCluster(ctx context.Context, input *rds.DeleteGlobalClusterInput) (*rds.DeleteGlobalClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteGlobalClusterWithContext(ctx, input)
}

func (a *Activities) DeleteInstallationMedia(ctx context.Context, input *rds.DeleteInstallationMediaInput) (*rds.DeleteInstallationMediaOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteInstallationMediaWithContext(ctx, input)
}

func (a *Activities) DeleteOptionGroup(ctx context.Context, input *rds.DeleteOptionGroupInput) (*rds.DeleteOptionGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteOptionGroupWithContext(ctx, input)
}

func (a *Activities) DeregisterDBProxyTargets(ctx context.Context, input *rds.DeregisterDBProxyTargetsInput) (*rds.DeregisterDBProxyTargetsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeregisterDBProxyTargetsWithContext(ctx, input)
}

func (a *Activities) DescribeAccountAttributes(ctx context.Context, input *rds.DescribeAccountAttributesInput) (*rds.DescribeAccountAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeAccountAttributesWithContext(ctx, input)
}

func (a *Activities) DescribeCertificates(ctx context.Context, input *rds.DescribeCertificatesInput) (*rds.DescribeCertificatesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeCertificatesWithContext(ctx, input)
}

func (a *Activities) DescribeCustomAvailabilityZones(ctx context.Context, input *rds.DescribeCustomAvailabilityZonesInput) (*rds.DescribeCustomAvailabilityZonesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeCustomAvailabilityZonesWithContext(ctx, input)
}

func (a *Activities) DescribeDBClusterBacktracks(ctx context.Context, input *rds.DescribeDBClusterBacktracksInput) (*rds.DescribeDBClusterBacktracksOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBClusterBacktracksWithContext(ctx, input)
}

func (a *Activities) DescribeDBClusterEndpoints(ctx context.Context, input *rds.DescribeDBClusterEndpointsInput) (*rds.DescribeDBClusterEndpointsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBClusterEndpointsWithContext(ctx, input)
}

func (a *Activities) DescribeDBClusterParameterGroups(ctx context.Context, input *rds.DescribeDBClusterParameterGroupsInput) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBClusterParameterGroupsWithContext(ctx, input)
}

func (a *Activities) DescribeDBClusterParameters(ctx context.Context, input *rds.DescribeDBClusterParametersInput) (*rds.DescribeDBClusterParametersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBClusterParametersWithContext(ctx, input)
}

func (a *Activities) DescribeDBClusterSnapshotAttributes(ctx context.Context, input *rds.DescribeDBClusterSnapshotAttributesInput) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBClusterSnapshotAttributesWithContext(ctx, input)
}

func (a *Activities) DescribeDBClusterSnapshots(ctx context.Context, input *rds.DescribeDBClusterSnapshotsInput) (*rds.DescribeDBClusterSnapshotsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBClusterSnapshotsWithContext(ctx, input)
}

func (a *Activities) DescribeDBClusters(ctx context.Context, input *rds.DescribeDBClustersInput) (*rds.DescribeDBClustersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBClustersWithContext(ctx, input)
}

func (a *Activities) DescribeDBEngineVersions(ctx context.Context, input *rds.DescribeDBEngineVersionsInput) (*rds.DescribeDBEngineVersionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBEngineVersionsWithContext(ctx, input)
}

func (a *Activities) DescribeDBInstanceAutomatedBackups(ctx context.Context, input *rds.DescribeDBInstanceAutomatedBackupsInput) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBInstanceAutomatedBackupsWithContext(ctx, input)
}

func (a *Activities) DescribeDBInstances(ctx context.Context, input *rds.DescribeDBInstancesInput) (*rds.DescribeDBInstancesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBInstancesWithContext(ctx, input)
}

func (a *Activities) DescribeDBLogFiles(ctx context.Context, input *rds.DescribeDBLogFilesInput) (*rds.DescribeDBLogFilesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBLogFilesWithContext(ctx, input)
}

func (a *Activities) DescribeDBParameterGroups(ctx context.Context, input *rds.DescribeDBParameterGroupsInput) (*rds.DescribeDBParameterGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBParameterGroupsWithContext(ctx, input)
}

func (a *Activities) DescribeDBParameters(ctx context.Context, input *rds.DescribeDBParametersInput) (*rds.DescribeDBParametersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBParametersWithContext(ctx, input)
}

func (a *Activities) DescribeDBProxies(ctx context.Context, input *rds.DescribeDBProxiesInput) (*rds.DescribeDBProxiesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBProxiesWithContext(ctx, input)
}

func (a *Activities) DescribeDBProxyTargetGroups(ctx context.Context, input *rds.DescribeDBProxyTargetGroupsInput) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBProxyTargetGroupsWithContext(ctx, input)
}

func (a *Activities) DescribeDBProxyTargets(ctx context.Context, input *rds.DescribeDBProxyTargetsInput) (*rds.DescribeDBProxyTargetsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBProxyTargetsWithContext(ctx, input)
}

func (a *Activities) DescribeDBSecurityGroups(ctx context.Context, input *rds.DescribeDBSecurityGroupsInput) (*rds.DescribeDBSecurityGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBSecurityGroupsWithContext(ctx, input)
}

func (a *Activities) DescribeDBSnapshotAttributes(ctx context.Context, input *rds.DescribeDBSnapshotAttributesInput) (*rds.DescribeDBSnapshotAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBSnapshotAttributesWithContext(ctx, input)
}

func (a *Activities) DescribeDBSnapshots(ctx context.Context, input *rds.DescribeDBSnapshotsInput) (*rds.DescribeDBSnapshotsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBSnapshotsWithContext(ctx, input)
}

func (a *Activities) DescribeDBSubnetGroups(ctx context.Context, input *rds.DescribeDBSubnetGroupsInput) (*rds.DescribeDBSubnetGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDBSubnetGroupsWithContext(ctx, input)
}

func (a *Activities) DescribeEngineDefaultClusterParameters(ctx context.Context, input *rds.DescribeEngineDefaultClusterParametersInput) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeEngineDefaultClusterParametersWithContext(ctx, input)
}

func (a *Activities) DescribeEngineDefaultParameters(ctx context.Context, input *rds.DescribeEngineDefaultParametersInput) (*rds.DescribeEngineDefaultParametersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeEngineDefaultParametersWithContext(ctx, input)
}

func (a *Activities) DescribeEventCategories(ctx context.Context, input *rds.DescribeEventCategoriesInput) (*rds.DescribeEventCategoriesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeEventCategoriesWithContext(ctx, input)
}

func (a *Activities) DescribeEventSubscriptions(ctx context.Context, input *rds.DescribeEventSubscriptionsInput) (*rds.DescribeEventSubscriptionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeEventSubscriptionsWithContext(ctx, input)
}

func (a *Activities) DescribeEvents(ctx context.Context, input *rds.DescribeEventsInput) (*rds.DescribeEventsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeEventsWithContext(ctx, input)
}

func (a *Activities) DescribeExportTasks(ctx context.Context, input *rds.DescribeExportTasksInput) (*rds.DescribeExportTasksOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeExportTasksWithContext(ctx, input)
}

func (a *Activities) DescribeGlobalClusters(ctx context.Context, input *rds.DescribeGlobalClustersInput) (*rds.DescribeGlobalClustersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeGlobalClustersWithContext(ctx, input)
}

func (a *Activities) DescribeInstallationMedia(ctx context.Context, input *rds.DescribeInstallationMediaInput) (*rds.DescribeInstallationMediaOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeInstallationMediaWithContext(ctx, input)
}

func (a *Activities) DescribeOptionGroupOptions(ctx context.Context, input *rds.DescribeOptionGroupOptionsInput) (*rds.DescribeOptionGroupOptionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeOptionGroupOptionsWithContext(ctx, input)
}

func (a *Activities) DescribeOptionGroups(ctx context.Context, input *rds.DescribeOptionGroupsInput) (*rds.DescribeOptionGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeOptionGroupsWithContext(ctx, input)
}

func (a *Activities) DescribeOrderableDBInstanceOptions(ctx context.Context, input *rds.DescribeOrderableDBInstanceOptionsInput) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeOrderableDBInstanceOptionsWithContext(ctx, input)
}

func (a *Activities) DescribePendingMaintenanceActions(ctx context.Context, input *rds.DescribePendingMaintenanceActionsInput) (*rds.DescribePendingMaintenanceActionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribePendingMaintenanceActionsWithContext(ctx, input)
}

func (a *Activities) DescribeReservedDBInstances(ctx context.Context, input *rds.DescribeReservedDBInstancesInput) (*rds.DescribeReservedDBInstancesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeReservedDBInstancesWithContext(ctx, input)
}

func (a *Activities) DescribeReservedDBInstancesOfferings(ctx context.Context, input *rds.DescribeReservedDBInstancesOfferingsInput) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeReservedDBInstancesOfferingsWithContext(ctx, input)
}

func (a *Activities) DescribeSourceRegions(ctx context.Context, input *rds.DescribeSourceRegionsInput) (*rds.DescribeSourceRegionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeSourceRegionsWithContext(ctx, input)
}

func (a *Activities) DescribeValidDBInstanceModifications(ctx context.Context, input *rds.DescribeValidDBInstanceModificationsInput) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeValidDBInstanceModificationsWithContext(ctx, input)
}

func (a *Activities) DownloadDBLogFilePortion(ctx context.Context, input *rds.DownloadDBLogFilePortionInput) (*rds.DownloadDBLogFilePortionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DownloadDBLogFilePortionWithContext(ctx, input)
}

func (a *Activities) FailoverDBCluster(ctx context.Context, input *rds.FailoverDBClusterInput) (*rds.FailoverDBClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.FailoverDBClusterWithContext(ctx, input)
}

func (a *Activities) ImportInstallationMedia(ctx context.Context, input *rds.ImportInstallationMediaInput) (*rds.ImportInstallationMediaOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ImportInstallationMediaWithContext(ctx, input)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *rds.ListTagsForResourceInput) (*rds.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTagsForResourceWithContext(ctx, input)
}

func (a *Activities) ModifyCertificates(ctx context.Context, input *rds.ModifyCertificatesInput) (*rds.ModifyCertificatesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyCertificatesWithContext(ctx, input)
}

func (a *Activities) ModifyCurrentDBClusterCapacity(ctx context.Context, input *rds.ModifyCurrentDBClusterCapacityInput) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyCurrentDBClusterCapacityWithContext(ctx, input)
}

func (a *Activities) ModifyDBCluster(ctx context.Context, input *rds.ModifyDBClusterInput) (*rds.ModifyDBClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyDBClusterWithContext(ctx, input)
}

func (a *Activities) ModifyDBClusterEndpoint(ctx context.Context, input *rds.ModifyDBClusterEndpointInput) (*rds.ModifyDBClusterEndpointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyDBClusterEndpointWithContext(ctx, input)
}

func (a *Activities) ModifyDBClusterParameterGroup(ctx context.Context, input *rds.ModifyDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyDBClusterParameterGroupWithContext(ctx, input)
}

func (a *Activities) ModifyDBClusterSnapshotAttribute(ctx context.Context, input *rds.ModifyDBClusterSnapshotAttributeInput) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyDBClusterSnapshotAttributeWithContext(ctx, input)
}

func (a *Activities) ModifyDBInstance(ctx context.Context, input *rds.ModifyDBInstanceInput) (*rds.ModifyDBInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyDBInstanceWithContext(ctx, input)
}

func (a *Activities) ModifyDBParameterGroup(ctx context.Context, input *rds.ModifyDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyDBParameterGroupWithContext(ctx, input)
}

func (a *Activities) ModifyDBProxy(ctx context.Context, input *rds.ModifyDBProxyInput) (*rds.ModifyDBProxyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyDBProxyWithContext(ctx, input)
}

func (a *Activities) ModifyDBProxyTargetGroup(ctx context.Context, input *rds.ModifyDBProxyTargetGroupInput) (*rds.ModifyDBProxyTargetGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyDBProxyTargetGroupWithContext(ctx, input)
}

func (a *Activities) ModifyDBSnapshot(ctx context.Context, input *rds.ModifyDBSnapshotInput) (*rds.ModifyDBSnapshotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyDBSnapshotWithContext(ctx, input)
}

func (a *Activities) ModifyDBSnapshotAttribute(ctx context.Context, input *rds.ModifyDBSnapshotAttributeInput) (*rds.ModifyDBSnapshotAttributeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyDBSnapshotAttributeWithContext(ctx, input)
}

func (a *Activities) ModifyDBSubnetGroup(ctx context.Context, input *rds.ModifyDBSubnetGroupInput) (*rds.ModifyDBSubnetGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyDBSubnetGroupWithContext(ctx, input)
}

func (a *Activities) ModifyEventSubscription(ctx context.Context, input *rds.ModifyEventSubscriptionInput) (*rds.ModifyEventSubscriptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyEventSubscriptionWithContext(ctx, input)
}

func (a *Activities) ModifyGlobalCluster(ctx context.Context, input *rds.ModifyGlobalClusterInput) (*rds.ModifyGlobalClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyGlobalClusterWithContext(ctx, input)
}

func (a *Activities) ModifyOptionGroup(ctx context.Context, input *rds.ModifyOptionGroupInput) (*rds.ModifyOptionGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyOptionGroupWithContext(ctx, input)
}

func (a *Activities) PromoteReadReplica(ctx context.Context, input *rds.PromoteReadReplicaInput) (*rds.PromoteReadReplicaOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PromoteReadReplicaWithContext(ctx, input)
}

func (a *Activities) PromoteReadReplicaDBCluster(ctx context.Context, input *rds.PromoteReadReplicaDBClusterInput) (*rds.PromoteReadReplicaDBClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PromoteReadReplicaDBClusterWithContext(ctx, input)
}

func (a *Activities) PurchaseReservedDBInstancesOffering(ctx context.Context, input *rds.PurchaseReservedDBInstancesOfferingInput) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PurchaseReservedDBInstancesOfferingWithContext(ctx, input)
}

func (a *Activities) RebootDBInstance(ctx context.Context, input *rds.RebootDBInstanceInput) (*rds.RebootDBInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RebootDBInstanceWithContext(ctx, input)
}

func (a *Activities) RegisterDBProxyTargets(ctx context.Context, input *rds.RegisterDBProxyTargetsInput) (*rds.RegisterDBProxyTargetsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RegisterDBProxyTargetsWithContext(ctx, input)
}

func (a *Activities) RemoveFromGlobalCluster(ctx context.Context, input *rds.RemoveFromGlobalClusterInput) (*rds.RemoveFromGlobalClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RemoveFromGlobalClusterWithContext(ctx, input)
}

func (a *Activities) RemoveRoleFromDBCluster(ctx context.Context, input *rds.RemoveRoleFromDBClusterInput) (*rds.RemoveRoleFromDBClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RemoveRoleFromDBClusterWithContext(ctx, input)
}

func (a *Activities) RemoveRoleFromDBInstance(ctx context.Context, input *rds.RemoveRoleFromDBInstanceInput) (*rds.RemoveRoleFromDBInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RemoveRoleFromDBInstanceWithContext(ctx, input)
}

func (a *Activities) RemoveSourceIdentifierFromSubscription(ctx context.Context, input *rds.RemoveSourceIdentifierFromSubscriptionInput) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RemoveSourceIdentifierFromSubscriptionWithContext(ctx, input)
}

func (a *Activities) RemoveTagsFromResource(ctx context.Context, input *rds.RemoveTagsFromResourceInput) (*rds.RemoveTagsFromResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RemoveTagsFromResourceWithContext(ctx, input)
}

func (a *Activities) ResetDBClusterParameterGroup(ctx context.Context, input *rds.ResetDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ResetDBClusterParameterGroupWithContext(ctx, input)
}

func (a *Activities) ResetDBParameterGroup(ctx context.Context, input *rds.ResetDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ResetDBParameterGroupWithContext(ctx, input)
}

func (a *Activities) RestoreDBClusterFromS3(ctx context.Context, input *rds.RestoreDBClusterFromS3Input) (*rds.RestoreDBClusterFromS3Output, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RestoreDBClusterFromS3WithContext(ctx, input)
}

func (a *Activities) RestoreDBClusterFromSnapshot(ctx context.Context, input *rds.RestoreDBClusterFromSnapshotInput) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RestoreDBClusterFromSnapshotWithContext(ctx, input)
}

func (a *Activities) RestoreDBClusterToPointInTime(ctx context.Context, input *rds.RestoreDBClusterToPointInTimeInput) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RestoreDBClusterToPointInTimeWithContext(ctx, input)
}

func (a *Activities) RestoreDBInstanceFromDBSnapshot(ctx context.Context, input *rds.RestoreDBInstanceFromDBSnapshotInput) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RestoreDBInstanceFromDBSnapshotWithContext(ctx, input)
}

func (a *Activities) RestoreDBInstanceFromS3(ctx context.Context, input *rds.RestoreDBInstanceFromS3Input) (*rds.RestoreDBInstanceFromS3Output, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RestoreDBInstanceFromS3WithContext(ctx, input)
}

func (a *Activities) RestoreDBInstanceToPointInTime(ctx context.Context, input *rds.RestoreDBInstanceToPointInTimeInput) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RestoreDBInstanceToPointInTimeWithContext(ctx, input)
}

func (a *Activities) RevokeDBSecurityGroupIngress(ctx context.Context, input *rds.RevokeDBSecurityGroupIngressInput) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RevokeDBSecurityGroupIngressWithContext(ctx, input)
}

func (a *Activities) StartActivityStream(ctx context.Context, input *rds.StartActivityStreamInput) (*rds.StartActivityStreamOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StartActivityStreamWithContext(ctx, input)
}

func (a *Activities) StartDBCluster(ctx context.Context, input *rds.StartDBClusterInput) (*rds.StartDBClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StartDBClusterWithContext(ctx, input)
}

func (a *Activities) StartDBInstance(ctx context.Context, input *rds.StartDBInstanceInput) (*rds.StartDBInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StartDBInstanceWithContext(ctx, input)
}

func (a *Activities) StartExportTask(ctx context.Context, input *rds.StartExportTaskInput) (*rds.StartExportTaskOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StartExportTaskWithContext(ctx, input)
}

func (a *Activities) StopActivityStream(ctx context.Context, input *rds.StopActivityStreamInput) (*rds.StopActivityStreamOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StopActivityStreamWithContext(ctx, input)
}

func (a *Activities) StopDBCluster(ctx context.Context, input *rds.StopDBClusterInput) (*rds.StopDBClusterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StopDBClusterWithContext(ctx, input)
}

func (a *Activities) StopDBInstance(ctx context.Context, input *rds.StopDBInstanceInput) (*rds.StopDBInstanceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StopDBInstanceWithContext(ctx, input)
}

func (a *Activities) WaitUntilDBClusterSnapshotAvailable(ctx context.Context, input *rds.DescribeDBClusterSnapshotsInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilDBClusterSnapshotAvailableWithContext(ctx, input, options...)
	})
}

func (a *Activities) WaitUntilDBClusterSnapshotDeleted(ctx context.Context, input *rds.DescribeDBClusterSnapshotsInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilDBClusterSnapshotDeletedWithContext(ctx, input, options...)
	})
}

func (a *Activities) WaitUntilDBInstanceAvailable(ctx context.Context, input *rds.DescribeDBInstancesInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilDBInstanceAvailableWithContext(ctx, input, options...)
	})
}

func (a *Activities) WaitUntilDBInstanceDeleted(ctx context.Context, input *rds.DescribeDBInstancesInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilDBInstanceDeletedWithContext(ctx, input, options...)
	})
}

func (a *Activities) WaitUntilDBSnapshotAvailable(ctx context.Context, input *rds.DescribeDBSnapshotsInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilDBSnapshotAvailableWithContext(ctx, input, options...)
	})
}

func (a *Activities) WaitUntilDBSnapshotDeleted(ctx context.Context, input *rds.DescribeDBSnapshotsInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilDBSnapshotDeletedWithContext(ctx, input, options...)
	})
}
