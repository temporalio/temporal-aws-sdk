// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package ses

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/ses"
	"github.com/aws/aws-sdk-go/service/ses/sesiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client sesiface.SESAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := ses.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (sesiface.SESAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return ses.New(sess), nil
}

func (a *Activities) CloneReceiptRuleSet(ctx context.Context, input *ses.CloneReceiptRuleSetInput) (*ses.CloneReceiptRuleSetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CloneReceiptRuleSetWithContext(ctx, input)
}

func (a *Activities) CreateConfigurationSet(ctx context.Context, input *ses.CreateConfigurationSetInput) (*ses.CreateConfigurationSetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateConfigurationSetWithContext(ctx, input)
}

func (a *Activities) CreateConfigurationSetEventDestination(ctx context.Context, input *ses.CreateConfigurationSetEventDestinationInput) (*ses.CreateConfigurationSetEventDestinationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateConfigurationSetEventDestinationWithContext(ctx, input)
}

func (a *Activities) CreateConfigurationSetTrackingOptions(ctx context.Context, input *ses.CreateConfigurationSetTrackingOptionsInput) (*ses.CreateConfigurationSetTrackingOptionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateConfigurationSetTrackingOptionsWithContext(ctx, input)
}

func (a *Activities) CreateCustomVerificationEmailTemplate(ctx context.Context, input *ses.CreateCustomVerificationEmailTemplateInput) (*ses.CreateCustomVerificationEmailTemplateOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateCustomVerificationEmailTemplateWithContext(ctx, input)
}

func (a *Activities) CreateReceiptFilter(ctx context.Context, input *ses.CreateReceiptFilterInput) (*ses.CreateReceiptFilterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateReceiptFilterWithContext(ctx, input)
}

func (a *Activities) CreateReceiptRule(ctx context.Context, input *ses.CreateReceiptRuleInput) (*ses.CreateReceiptRuleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateReceiptRuleWithContext(ctx, input)
}

func (a *Activities) CreateReceiptRuleSet(ctx context.Context, input *ses.CreateReceiptRuleSetInput) (*ses.CreateReceiptRuleSetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateReceiptRuleSetWithContext(ctx, input)
}

func (a *Activities) CreateTemplate(ctx context.Context, input *ses.CreateTemplateInput) (*ses.CreateTemplateOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateTemplateWithContext(ctx, input)
}

func (a *Activities) DeleteConfigurationSet(ctx context.Context, input *ses.DeleteConfigurationSetInput) (*ses.DeleteConfigurationSetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteConfigurationSetWithContext(ctx, input)
}

func (a *Activities) DeleteConfigurationSetEventDestination(ctx context.Context, input *ses.DeleteConfigurationSetEventDestinationInput) (*ses.DeleteConfigurationSetEventDestinationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteConfigurationSetEventDestinationWithContext(ctx, input)
}

func (a *Activities) DeleteConfigurationSetTrackingOptions(ctx context.Context, input *ses.DeleteConfigurationSetTrackingOptionsInput) (*ses.DeleteConfigurationSetTrackingOptionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteConfigurationSetTrackingOptionsWithContext(ctx, input)
}

func (a *Activities) DeleteCustomVerificationEmailTemplate(ctx context.Context, input *ses.DeleteCustomVerificationEmailTemplateInput) (*ses.DeleteCustomVerificationEmailTemplateOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteCustomVerificationEmailTemplateWithContext(ctx, input)
}

func (a *Activities) DeleteIdentity(ctx context.Context, input *ses.DeleteIdentityInput) (*ses.DeleteIdentityOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteIdentityWithContext(ctx, input)
}

func (a *Activities) DeleteIdentityPolicy(ctx context.Context, input *ses.DeleteIdentityPolicyInput) (*ses.DeleteIdentityPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteIdentityPolicyWithContext(ctx, input)
}

func (a *Activities) DeleteReceiptFilter(ctx context.Context, input *ses.DeleteReceiptFilterInput) (*ses.DeleteReceiptFilterOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteReceiptFilterWithContext(ctx, input)
}

func (a *Activities) DeleteReceiptRule(ctx context.Context, input *ses.DeleteReceiptRuleInput) (*ses.DeleteReceiptRuleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteReceiptRuleWithContext(ctx, input)
}

func (a *Activities) DeleteReceiptRuleSet(ctx context.Context, input *ses.DeleteReceiptRuleSetInput) (*ses.DeleteReceiptRuleSetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteReceiptRuleSetWithContext(ctx, input)
}

func (a *Activities) DeleteTemplate(ctx context.Context, input *ses.DeleteTemplateInput) (*ses.DeleteTemplateOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteTemplateWithContext(ctx, input)
}

func (a *Activities) DeleteVerifiedEmailAddress(ctx context.Context, input *ses.DeleteVerifiedEmailAddressInput) (*ses.DeleteVerifiedEmailAddressOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteVerifiedEmailAddressWithContext(ctx, input)
}

func (a *Activities) DescribeActiveReceiptRuleSet(ctx context.Context, input *ses.DescribeActiveReceiptRuleSetInput) (*ses.DescribeActiveReceiptRuleSetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeActiveReceiptRuleSetWithContext(ctx, input)
}

func (a *Activities) DescribeConfigurationSet(ctx context.Context, input *ses.DescribeConfigurationSetInput) (*ses.DescribeConfigurationSetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeConfigurationSetWithContext(ctx, input)
}

func (a *Activities) DescribeReceiptRule(ctx context.Context, input *ses.DescribeReceiptRuleInput) (*ses.DescribeReceiptRuleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeReceiptRuleWithContext(ctx, input)
}

func (a *Activities) DescribeReceiptRuleSet(ctx context.Context, input *ses.DescribeReceiptRuleSetInput) (*ses.DescribeReceiptRuleSetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeReceiptRuleSetWithContext(ctx, input)
}

func (a *Activities) GetAccountSendingEnabled(ctx context.Context, input *ses.GetAccountSendingEnabledInput) (*ses.GetAccountSendingEnabledOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetAccountSendingEnabledWithContext(ctx, input)
}

func (a *Activities) GetCustomVerificationEmailTemplate(ctx context.Context, input *ses.GetCustomVerificationEmailTemplateInput) (*ses.GetCustomVerificationEmailTemplateOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetCustomVerificationEmailTemplateWithContext(ctx, input)
}

func (a *Activities) GetIdentityDkimAttributes(ctx context.Context, input *ses.GetIdentityDkimAttributesInput) (*ses.GetIdentityDkimAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetIdentityDkimAttributesWithContext(ctx, input)
}

func (a *Activities) GetIdentityMailFromDomainAttributes(ctx context.Context, input *ses.GetIdentityMailFromDomainAttributesInput) (*ses.GetIdentityMailFromDomainAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetIdentityMailFromDomainAttributesWithContext(ctx, input)
}

func (a *Activities) GetIdentityNotificationAttributes(ctx context.Context, input *ses.GetIdentityNotificationAttributesInput) (*ses.GetIdentityNotificationAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetIdentityNotificationAttributesWithContext(ctx, input)
}

func (a *Activities) GetIdentityPolicies(ctx context.Context, input *ses.GetIdentityPoliciesInput) (*ses.GetIdentityPoliciesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetIdentityPoliciesWithContext(ctx, input)
}

func (a *Activities) GetIdentityVerificationAttributes(ctx context.Context, input *ses.GetIdentityVerificationAttributesInput) (*ses.GetIdentityVerificationAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetIdentityVerificationAttributesWithContext(ctx, input)
}

func (a *Activities) GetSendQuota(ctx context.Context, input *ses.GetSendQuotaInput) (*ses.GetSendQuotaOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetSendQuotaWithContext(ctx, input)
}

func (a *Activities) GetSendStatistics(ctx context.Context, input *ses.GetSendStatisticsInput) (*ses.GetSendStatisticsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetSendStatisticsWithContext(ctx, input)
}

func (a *Activities) GetTemplate(ctx context.Context, input *ses.GetTemplateInput) (*ses.GetTemplateOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetTemplateWithContext(ctx, input)
}

func (a *Activities) ListConfigurationSets(ctx context.Context, input *ses.ListConfigurationSetsInput) (*ses.ListConfigurationSetsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListConfigurationSetsWithContext(ctx, input)
}

func (a *Activities) ListCustomVerificationEmailTemplates(ctx context.Context, input *ses.ListCustomVerificationEmailTemplatesInput) (*ses.ListCustomVerificationEmailTemplatesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListCustomVerificationEmailTemplatesWithContext(ctx, input)
}

func (a *Activities) ListIdentities(ctx context.Context, input *ses.ListIdentitiesInput) (*ses.ListIdentitiesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListIdentitiesWithContext(ctx, input)
}

func (a *Activities) ListIdentityPolicies(ctx context.Context, input *ses.ListIdentityPoliciesInput) (*ses.ListIdentityPoliciesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListIdentityPoliciesWithContext(ctx, input)
}

func (a *Activities) ListReceiptFilters(ctx context.Context, input *ses.ListReceiptFiltersInput) (*ses.ListReceiptFiltersOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListReceiptFiltersWithContext(ctx, input)
}

func (a *Activities) ListReceiptRuleSets(ctx context.Context, input *ses.ListReceiptRuleSetsInput) (*ses.ListReceiptRuleSetsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListReceiptRuleSetsWithContext(ctx, input)
}

func (a *Activities) ListTemplates(ctx context.Context, input *ses.ListTemplatesInput) (*ses.ListTemplatesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTemplatesWithContext(ctx, input)
}

func (a *Activities) ListVerifiedEmailAddresses(ctx context.Context, input *ses.ListVerifiedEmailAddressesInput) (*ses.ListVerifiedEmailAddressesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListVerifiedEmailAddressesWithContext(ctx, input)
}

func (a *Activities) PutConfigurationSetDeliveryOptions(ctx context.Context, input *ses.PutConfigurationSetDeliveryOptionsInput) (*ses.PutConfigurationSetDeliveryOptionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutConfigurationSetDeliveryOptionsWithContext(ctx, input)
}

func (a *Activities) PutIdentityPolicy(ctx context.Context, input *ses.PutIdentityPolicyInput) (*ses.PutIdentityPolicyOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PutIdentityPolicyWithContext(ctx, input)
}

func (a *Activities) ReorderReceiptRuleSet(ctx context.Context, input *ses.ReorderReceiptRuleSetInput) (*ses.ReorderReceiptRuleSetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ReorderReceiptRuleSetWithContext(ctx, input)
}

func (a *Activities) SendBounce(ctx context.Context, input *ses.SendBounceInput) (*ses.SendBounceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SendBounceWithContext(ctx, input)
}

func (a *Activities) SendBulkTemplatedEmail(ctx context.Context, input *ses.SendBulkTemplatedEmailInput) (*ses.SendBulkTemplatedEmailOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SendBulkTemplatedEmailWithContext(ctx, input)
}

func (a *Activities) SendCustomVerificationEmail(ctx context.Context, input *ses.SendCustomVerificationEmailInput) (*ses.SendCustomVerificationEmailOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SendCustomVerificationEmailWithContext(ctx, input)
}

func (a *Activities) SendEmail(ctx context.Context, input *ses.SendEmailInput) (*ses.SendEmailOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SendEmailWithContext(ctx, input)
}

func (a *Activities) SendRawEmail(ctx context.Context, input *ses.SendRawEmailInput) (*ses.SendRawEmailOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SendRawEmailWithContext(ctx, input)
}

func (a *Activities) SendTemplatedEmail(ctx context.Context, input *ses.SendTemplatedEmailInput) (*ses.SendTemplatedEmailOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SendTemplatedEmailWithContext(ctx, input)
}

func (a *Activities) SetActiveReceiptRuleSet(ctx context.Context, input *ses.SetActiveReceiptRuleSetInput) (*ses.SetActiveReceiptRuleSetOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SetActiveReceiptRuleSetWithContext(ctx, input)
}

func (a *Activities) SetIdentityDkimEnabled(ctx context.Context, input *ses.SetIdentityDkimEnabledInput) (*ses.SetIdentityDkimEnabledOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SetIdentityDkimEnabledWithContext(ctx, input)
}

func (a *Activities) SetIdentityFeedbackForwardingEnabled(ctx context.Context, input *ses.SetIdentityFeedbackForwardingEnabledInput) (*ses.SetIdentityFeedbackForwardingEnabledOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SetIdentityFeedbackForwardingEnabledWithContext(ctx, input)
}

func (a *Activities) SetIdentityHeadersInNotificationsEnabled(ctx context.Context, input *ses.SetIdentityHeadersInNotificationsEnabledInput) (*ses.SetIdentityHeadersInNotificationsEnabledOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SetIdentityHeadersInNotificationsEnabledWithContext(ctx, input)
}

func (a *Activities) SetIdentityMailFromDomain(ctx context.Context, input *ses.SetIdentityMailFromDomainInput) (*ses.SetIdentityMailFromDomainOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SetIdentityMailFromDomainWithContext(ctx, input)
}

func (a *Activities) SetIdentityNotificationTopic(ctx context.Context, input *ses.SetIdentityNotificationTopicInput) (*ses.SetIdentityNotificationTopicOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SetIdentityNotificationTopicWithContext(ctx, input)
}

func (a *Activities) SetReceiptRulePosition(ctx context.Context, input *ses.SetReceiptRulePositionInput) (*ses.SetReceiptRulePositionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SetReceiptRulePositionWithContext(ctx, input)
}

func (a *Activities) TestRenderTemplate(ctx context.Context, input *ses.TestRenderTemplateInput) (*ses.TestRenderTemplateOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.TestRenderTemplateWithContext(ctx, input)
}

func (a *Activities) UpdateAccountSendingEnabled(ctx context.Context, input *ses.UpdateAccountSendingEnabledInput) (*ses.UpdateAccountSendingEnabledOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateAccountSendingEnabledWithContext(ctx, input)
}

func (a *Activities) UpdateConfigurationSetEventDestination(ctx context.Context, input *ses.UpdateConfigurationSetEventDestinationInput) (*ses.UpdateConfigurationSetEventDestinationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateConfigurationSetEventDestinationWithContext(ctx, input)
}

func (a *Activities) UpdateConfigurationSetReputationMetricsEnabled(ctx context.Context, input *ses.UpdateConfigurationSetReputationMetricsEnabledInput) (*ses.UpdateConfigurationSetReputationMetricsEnabledOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateConfigurationSetReputationMetricsEnabledWithContext(ctx, input)
}

func (a *Activities) UpdateConfigurationSetSendingEnabled(ctx context.Context, input *ses.UpdateConfigurationSetSendingEnabledInput) (*ses.UpdateConfigurationSetSendingEnabledOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateConfigurationSetSendingEnabledWithContext(ctx, input)
}

func (a *Activities) UpdateConfigurationSetTrackingOptions(ctx context.Context, input *ses.UpdateConfigurationSetTrackingOptionsInput) (*ses.UpdateConfigurationSetTrackingOptionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateConfigurationSetTrackingOptionsWithContext(ctx, input)
}

func (a *Activities) UpdateCustomVerificationEmailTemplate(ctx context.Context, input *ses.UpdateCustomVerificationEmailTemplateInput) (*ses.UpdateCustomVerificationEmailTemplateOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateCustomVerificationEmailTemplateWithContext(ctx, input)
}

func (a *Activities) UpdateReceiptRule(ctx context.Context, input *ses.UpdateReceiptRuleInput) (*ses.UpdateReceiptRuleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateReceiptRuleWithContext(ctx, input)
}

func (a *Activities) UpdateTemplate(ctx context.Context, input *ses.UpdateTemplateInput) (*ses.UpdateTemplateOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateTemplateWithContext(ctx, input)
}

func (a *Activities) VerifyDomainDkim(ctx context.Context, input *ses.VerifyDomainDkimInput) (*ses.VerifyDomainDkimOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.VerifyDomainDkimWithContext(ctx, input)
}

func (a *Activities) VerifyDomainIdentity(ctx context.Context, input *ses.VerifyDomainIdentityInput) (*ses.VerifyDomainIdentityOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.VerifyDomainIdentityWithContext(ctx, input)
}

func (a *Activities) VerifyEmailAddress(ctx context.Context, input *ses.VerifyEmailAddressInput) (*ses.VerifyEmailAddressOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.VerifyEmailAddressWithContext(ctx, input)
}

func (a *Activities) VerifyEmailIdentity(ctx context.Context, input *ses.VerifyEmailIdentityInput) (*ses.VerifyEmailIdentityOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.VerifyEmailIdentityWithContext(ctx, input)
}

func (a *Activities) WaitUntilIdentityExists(ctx context.Context, input *ses.GetIdentityVerificationAttributesInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilIdentityExistsWithContext(ctx, input, options...)
	})
}
