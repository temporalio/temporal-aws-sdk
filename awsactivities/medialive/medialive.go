// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package medialive

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/medialive"
	"github.com/aws/aws-sdk-go/service/medialive/medialiveiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client medialiveiface.MediaLiveAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := medialive.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (medialiveiface.MediaLiveAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return medialive.New(sess), nil
}

func (a *Activities) BatchDelete(ctx context.Context, input *medialive.BatchDeleteInput) (*medialive.BatchDeleteOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.BatchDeleteWithContext(ctx, input)
}

func (a *Activities) BatchStart(ctx context.Context, input *medialive.BatchStartInput) (*medialive.BatchStartOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.BatchStartWithContext(ctx, input)
}

func (a *Activities) BatchStop(ctx context.Context, input *medialive.BatchStopInput) (*medialive.BatchStopOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.BatchStopWithContext(ctx, input)
}

func (a *Activities) BatchUpdateSchedule(ctx context.Context, input *medialive.BatchUpdateScheduleInput) (*medialive.BatchUpdateScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.BatchUpdateScheduleWithContext(ctx, input)
}

func (a *Activities) CreateChannel(ctx context.Context, input *medialive.CreateChannelInput) (*medialive.CreateChannelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateChannelWithContext(ctx, input)
}

func (a *Activities) CreateInput(ctx context.Context, input *medialive.CreateInputInput) (*medialive.CreateInputOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateInputWithContext(ctx, input)
}

func (a *Activities) CreateInputSecurityGroup(ctx context.Context, input *medialive.CreateInputSecurityGroupInput) (*medialive.CreateInputSecurityGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateInputSecurityGroupWithContext(ctx, input)
}

func (a *Activities) CreateMultiplex(ctx context.Context, input *medialive.CreateMultiplexInput) (*medialive.CreateMultiplexOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateMultiplexWithContext(ctx, input)
}

func (a *Activities) CreateMultiplexProgram(ctx context.Context, input *medialive.CreateMultiplexProgramInput) (*medialive.CreateMultiplexProgramOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateMultiplexProgramWithContext(ctx, input)
}

func (a *Activities) CreateTags(ctx context.Context, input *medialive.CreateTagsInput) (*medialive.CreateTagsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateTagsWithContext(ctx, input)
}

func (a *Activities) DeleteChannel(ctx context.Context, input *medialive.DeleteChannelInput) (*medialive.DeleteChannelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteChannelWithContext(ctx, input)
}

func (a *Activities) DeleteInput(ctx context.Context, input *medialive.DeleteInputInput) (*medialive.DeleteInputOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteInputWithContext(ctx, input)
}

func (a *Activities) DeleteInputSecurityGroup(ctx context.Context, input *medialive.DeleteInputSecurityGroupInput) (*medialive.DeleteInputSecurityGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteInputSecurityGroupWithContext(ctx, input)
}

func (a *Activities) DeleteMultiplex(ctx context.Context, input *medialive.DeleteMultiplexInput) (*medialive.DeleteMultiplexOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteMultiplexWithContext(ctx, input)
}

func (a *Activities) DeleteMultiplexProgram(ctx context.Context, input *medialive.DeleteMultiplexProgramInput) (*medialive.DeleteMultiplexProgramOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteMultiplexProgramWithContext(ctx, input)
}

func (a *Activities) DeleteReservation(ctx context.Context, input *medialive.DeleteReservationInput) (*medialive.DeleteReservationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteReservationWithContext(ctx, input)
}

func (a *Activities) DeleteSchedule(ctx context.Context, input *medialive.DeleteScheduleInput) (*medialive.DeleteScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteScheduleWithContext(ctx, input)
}

func (a *Activities) DeleteTags(ctx context.Context, input *medialive.DeleteTagsInput) (*medialive.DeleteTagsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteTagsWithContext(ctx, input)
}

func (a *Activities) DescribeChannel(ctx context.Context, input *medialive.DescribeChannelInput) (*medialive.DescribeChannelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeChannelWithContext(ctx, input)
}

func (a *Activities) DescribeInput(ctx context.Context, input *medialive.DescribeInputInput) (*medialive.DescribeInputOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeInputWithContext(ctx, input)
}

func (a *Activities) DescribeInputDevice(ctx context.Context, input *medialive.DescribeInputDeviceInput) (*medialive.DescribeInputDeviceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeInputDeviceWithContext(ctx, input)
}

func (a *Activities) DescribeInputDeviceThumbnail(ctx context.Context, input *medialive.DescribeInputDeviceThumbnailInput) (*medialive.DescribeInputDeviceThumbnailOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeInputDeviceThumbnailWithContext(ctx, input)
}

func (a *Activities) DescribeInputSecurityGroup(ctx context.Context, input *medialive.DescribeInputSecurityGroupInput) (*medialive.DescribeInputSecurityGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeInputSecurityGroupWithContext(ctx, input)
}

func (a *Activities) DescribeMultiplex(ctx context.Context, input *medialive.DescribeMultiplexInput) (*medialive.DescribeMultiplexOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeMultiplexWithContext(ctx, input)
}

func (a *Activities) DescribeMultiplexProgram(ctx context.Context, input *medialive.DescribeMultiplexProgramInput) (*medialive.DescribeMultiplexProgramOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeMultiplexProgramWithContext(ctx, input)
}

func (a *Activities) DescribeOffering(ctx context.Context, input *medialive.DescribeOfferingInput) (*medialive.DescribeOfferingOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeOfferingWithContext(ctx, input)
}

func (a *Activities) DescribeReservation(ctx context.Context, input *medialive.DescribeReservationInput) (*medialive.DescribeReservationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeReservationWithContext(ctx, input)
}

func (a *Activities) DescribeSchedule(ctx context.Context, input *medialive.DescribeScheduleInput) (*medialive.DescribeScheduleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeScheduleWithContext(ctx, input)
}

func (a *Activities) ListChannels(ctx context.Context, input *medialive.ListChannelsInput) (*medialive.ListChannelsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListChannelsWithContext(ctx, input)
}

func (a *Activities) ListInputDevices(ctx context.Context, input *medialive.ListInputDevicesInput) (*medialive.ListInputDevicesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListInputDevicesWithContext(ctx, input)
}

func (a *Activities) ListInputSecurityGroups(ctx context.Context, input *medialive.ListInputSecurityGroupsInput) (*medialive.ListInputSecurityGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListInputSecurityGroupsWithContext(ctx, input)
}

func (a *Activities) ListInputs(ctx context.Context, input *medialive.ListInputsInput) (*medialive.ListInputsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListInputsWithContext(ctx, input)
}

func (a *Activities) ListMultiplexPrograms(ctx context.Context, input *medialive.ListMultiplexProgramsInput) (*medialive.ListMultiplexProgramsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListMultiplexProgramsWithContext(ctx, input)
}

func (a *Activities) ListMultiplexes(ctx context.Context, input *medialive.ListMultiplexesInput) (*medialive.ListMultiplexesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListMultiplexesWithContext(ctx, input)
}

func (a *Activities) ListOfferings(ctx context.Context, input *medialive.ListOfferingsInput) (*medialive.ListOfferingsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListOfferingsWithContext(ctx, input)
}

func (a *Activities) ListReservations(ctx context.Context, input *medialive.ListReservationsInput) (*medialive.ListReservationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListReservationsWithContext(ctx, input)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *medialive.ListTagsForResourceInput) (*medialive.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTagsForResourceWithContext(ctx, input)
}

func (a *Activities) PurchaseOffering(ctx context.Context, input *medialive.PurchaseOfferingInput) (*medialive.PurchaseOfferingOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PurchaseOfferingWithContext(ctx, input)
}

func (a *Activities) StartChannel(ctx context.Context, input *medialive.StartChannelInput) (*medialive.StartChannelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StartChannelWithContext(ctx, input)
}

func (a *Activities) StartMultiplex(ctx context.Context, input *medialive.StartMultiplexInput) (*medialive.StartMultiplexOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StartMultiplexWithContext(ctx, input)
}

func (a *Activities) StopChannel(ctx context.Context, input *medialive.StopChannelInput) (*medialive.StopChannelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StopChannelWithContext(ctx, input)
}

func (a *Activities) StopMultiplex(ctx context.Context, input *medialive.StopMultiplexInput) (*medialive.StopMultiplexOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StopMultiplexWithContext(ctx, input)
}

func (a *Activities) UpdateChannel(ctx context.Context, input *medialive.UpdateChannelInput) (*medialive.UpdateChannelOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateChannelWithContext(ctx, input)
}

func (a *Activities) UpdateChannelClass(ctx context.Context, input *medialive.UpdateChannelClassInput) (*medialive.UpdateChannelClassOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateChannelClassWithContext(ctx, input)
}

func (a *Activities) UpdateInput(ctx context.Context, input *medialive.UpdateInputInput) (*medialive.UpdateInputOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateInputWithContext(ctx, input)
}

func (a *Activities) UpdateInputDevice(ctx context.Context, input *medialive.UpdateInputDeviceInput) (*medialive.UpdateInputDeviceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateInputDeviceWithContext(ctx, input)
}

func (a *Activities) UpdateInputSecurityGroup(ctx context.Context, input *medialive.UpdateInputSecurityGroupInput) (*medialive.UpdateInputSecurityGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateInputSecurityGroupWithContext(ctx, input)
}

func (a *Activities) UpdateMultiplex(ctx context.Context, input *medialive.UpdateMultiplexInput) (*medialive.UpdateMultiplexOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateMultiplexWithContext(ctx, input)
}

func (a *Activities) UpdateMultiplexProgram(ctx context.Context, input *medialive.UpdateMultiplexProgramInput) (*medialive.UpdateMultiplexProgramOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateMultiplexProgramWithContext(ctx, input)
}

func (a *Activities) UpdateReservation(ctx context.Context, input *medialive.UpdateReservationInput) (*medialive.UpdateReservationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateReservationWithContext(ctx, input)
}

func (a *Activities) WaitUntilChannelCreated(ctx context.Context, input *medialive.DescribeChannelInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilChannelCreatedWithContext(ctx, input, options...)
	})
}

func (a *Activities) WaitUntilChannelDeleted(ctx context.Context, input *medialive.DescribeChannelInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilChannelDeletedWithContext(ctx, input, options...)
	})
}

func (a *Activities) WaitUntilChannelRunning(ctx context.Context, input *medialive.DescribeChannelInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilChannelRunningWithContext(ctx, input, options...)
	})
}

func (a *Activities) WaitUntilChannelStopped(ctx context.Context, input *medialive.DescribeChannelInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilChannelStoppedWithContext(ctx, input, options...)
	})
}

func (a *Activities) WaitUntilInputAttached(ctx context.Context, input *medialive.DescribeInputInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilInputAttachedWithContext(ctx, input, options...)
	})
}

func (a *Activities) WaitUntilInputDeleted(ctx context.Context, input *medialive.DescribeInputInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilInputDeletedWithContext(ctx, input, options...)
	})
}

func (a *Activities) WaitUntilInputDetached(ctx context.Context, input *medialive.DescribeInputInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilInputDetachedWithContext(ctx, input, options...)
	})
}

func (a *Activities) WaitUntilMultiplexCreated(ctx context.Context, input *medialive.DescribeMultiplexInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilMultiplexCreatedWithContext(ctx, input, options...)
	})
}

func (a *Activities) WaitUntilMultiplexDeleted(ctx context.Context, input *medialive.DescribeMultiplexInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilMultiplexDeletedWithContext(ctx, input, options...)
	})
}

func (a *Activities) WaitUntilMultiplexRunning(ctx context.Context, input *medialive.DescribeMultiplexInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilMultiplexRunningWithContext(ctx, input, options...)
	})
}

func (a *Activities) WaitUntilMultiplexStopped(ctx context.Context, input *medialive.DescribeMultiplexInput) error {
	client, err := a.getClient(ctx)
	if err != nil {
		return err
	}
	return internal.WaitUntilActivity(ctx, func(ctx context.Context, options ...request.WaiterOption) error {
		return client.WaitUntilMultiplexStoppedWithContext(ctx, input, options...)
	})
}
