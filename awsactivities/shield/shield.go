// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package shield

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/shield"
	"github.com/aws/aws-sdk-go/service/shield/shieldiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client shieldiface.ShieldAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := shield.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (shieldiface.ShieldAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return shield.New(sess), nil
}

func (a *Activities) AssociateDRTLogBucket(ctx context.Context, input *shield.AssociateDRTLogBucketInput) (*shield.AssociateDRTLogBucketOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateDRTLogBucketWithContext(ctx, input)
}

func (a *Activities) AssociateDRTRole(ctx context.Context, input *shield.AssociateDRTRoleInput) (*shield.AssociateDRTRoleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateDRTRoleWithContext(ctx, input)
}

func (a *Activities) AssociateHealthCheck(ctx context.Context, input *shield.AssociateHealthCheckInput) (*shield.AssociateHealthCheckOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateHealthCheckWithContext(ctx, input)
}

func (a *Activities) AssociateProactiveEngagementDetails(ctx context.Context, input *shield.AssociateProactiveEngagementDetailsInput) (*shield.AssociateProactiveEngagementDetailsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateProactiveEngagementDetailsWithContext(ctx, input)
}

func (a *Activities) CreateProtection(ctx context.Context, input *shield.CreateProtectionInput) (*shield.CreateProtectionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateProtectionWithContext(ctx, input)
}

func (a *Activities) CreateSubscription(ctx context.Context, input *shield.CreateSubscriptionInput) (*shield.CreateSubscriptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateSubscriptionWithContext(ctx, input)
}

func (a *Activities) DeleteProtection(ctx context.Context, input *shield.DeleteProtectionInput) (*shield.DeleteProtectionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteProtectionWithContext(ctx, input)
}

func (a *Activities) DeleteSubscription(ctx context.Context, input *shield.DeleteSubscriptionInput) (*shield.DeleteSubscriptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteSubscriptionWithContext(ctx, input)
}

func (a *Activities) DescribeAttack(ctx context.Context, input *shield.DescribeAttackInput) (*shield.DescribeAttackOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeAttackWithContext(ctx, input)
}

func (a *Activities) DescribeDRTAccess(ctx context.Context, input *shield.DescribeDRTAccessInput) (*shield.DescribeDRTAccessOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeDRTAccessWithContext(ctx, input)
}

func (a *Activities) DescribeEmergencyContactSettings(ctx context.Context, input *shield.DescribeEmergencyContactSettingsInput) (*shield.DescribeEmergencyContactSettingsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeEmergencyContactSettingsWithContext(ctx, input)
}

func (a *Activities) DescribeProtection(ctx context.Context, input *shield.DescribeProtectionInput) (*shield.DescribeProtectionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeProtectionWithContext(ctx, input)
}

func (a *Activities) DescribeSubscription(ctx context.Context, input *shield.DescribeSubscriptionInput) (*shield.DescribeSubscriptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeSubscriptionWithContext(ctx, input)
}

func (a *Activities) DisableProactiveEngagement(ctx context.Context, input *shield.DisableProactiveEngagementInput) (*shield.DisableProactiveEngagementOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisableProactiveEngagementWithContext(ctx, input)
}

func (a *Activities) DisassociateDRTLogBucket(ctx context.Context, input *shield.DisassociateDRTLogBucketInput) (*shield.DisassociateDRTLogBucketOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisassociateDRTLogBucketWithContext(ctx, input)
}

func (a *Activities) DisassociateDRTRole(ctx context.Context, input *shield.DisassociateDRTRoleInput) (*shield.DisassociateDRTRoleOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisassociateDRTRoleWithContext(ctx, input)
}

func (a *Activities) DisassociateHealthCheck(ctx context.Context, input *shield.DisassociateHealthCheckInput) (*shield.DisassociateHealthCheckOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisassociateHealthCheckWithContext(ctx, input)
}

func (a *Activities) EnableProactiveEngagement(ctx context.Context, input *shield.EnableProactiveEngagementInput) (*shield.EnableProactiveEngagementOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.EnableProactiveEngagementWithContext(ctx, input)
}

func (a *Activities) GetSubscriptionState(ctx context.Context, input *shield.GetSubscriptionStateInput) (*shield.GetSubscriptionStateOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetSubscriptionStateWithContext(ctx, input)
}

func (a *Activities) ListAttacks(ctx context.Context, input *shield.ListAttacksInput) (*shield.ListAttacksOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListAttacksWithContext(ctx, input)
}

func (a *Activities) ListProtections(ctx context.Context, input *shield.ListProtectionsInput) (*shield.ListProtectionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListProtectionsWithContext(ctx, input)
}

func (a *Activities) UpdateEmergencyContactSettings(ctx context.Context, input *shield.UpdateEmergencyContactSettingsInput) (*shield.UpdateEmergencyContactSettingsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateEmergencyContactSettingsWithContext(ctx, input)
}

func (a *Activities) UpdateSubscription(ctx context.Context, input *shield.UpdateSubscriptionInput) (*shield.UpdateSubscriptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateSubscriptionWithContext(ctx, input)
}
