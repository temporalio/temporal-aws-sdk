// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package workspaces

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/workspaces"
	"github.com/aws/aws-sdk-go/service/workspaces/workspacesiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client workspacesiface.WorkSpacesAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := workspaces.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (workspacesiface.WorkSpacesAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return workspaces.New(sess), nil
}

func (a *Activities) AssociateConnectionAlias(ctx context.Context, input *workspaces.AssociateConnectionAliasInput) (*workspaces.AssociateConnectionAliasOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateConnectionAliasWithContext(ctx, input)
}

func (a *Activities) AssociateIpGroups(ctx context.Context, input *workspaces.AssociateIpGroupsInput) (*workspaces.AssociateIpGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AssociateIpGroupsWithContext(ctx, input)
}

func (a *Activities) AuthorizeIpRules(ctx context.Context, input *workspaces.AuthorizeIpRulesInput) (*workspaces.AuthorizeIpRulesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AuthorizeIpRulesWithContext(ctx, input)
}

func (a *Activities) CopyWorkspaceImage(ctx context.Context, input *workspaces.CopyWorkspaceImageInput) (*workspaces.CopyWorkspaceImageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CopyWorkspaceImageWithContext(ctx, input)
}

func (a *Activities) CreateConnectionAlias(ctx context.Context, input *workspaces.CreateConnectionAliasInput) (*workspaces.CreateConnectionAliasOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateConnectionAliasWithContext(ctx, input)
}

func (a *Activities) CreateIpGroup(ctx context.Context, input *workspaces.CreateIpGroupInput) (*workspaces.CreateIpGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateIpGroupWithContext(ctx, input)
}

func (a *Activities) CreateTags(ctx context.Context, input *workspaces.CreateTagsInput) (*workspaces.CreateTagsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateTagsWithContext(ctx, input)
}

func (a *Activities) CreateWorkspaces(ctx context.Context, input *workspaces.CreateWorkspacesInput) (*workspaces.CreateWorkspacesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateWorkspacesWithContext(ctx, input)
}

func (a *Activities) DeleteConnectionAlias(ctx context.Context, input *workspaces.DeleteConnectionAliasInput) (*workspaces.DeleteConnectionAliasOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteConnectionAliasWithContext(ctx, input)
}

func (a *Activities) DeleteIpGroup(ctx context.Context, input *workspaces.DeleteIpGroupInput) (*workspaces.DeleteIpGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteIpGroupWithContext(ctx, input)
}

func (a *Activities) DeleteTags(ctx context.Context, input *workspaces.DeleteTagsInput) (*workspaces.DeleteTagsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteTagsWithContext(ctx, input)
}

func (a *Activities) DeleteWorkspaceImage(ctx context.Context, input *workspaces.DeleteWorkspaceImageInput) (*workspaces.DeleteWorkspaceImageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteWorkspaceImageWithContext(ctx, input)
}

func (a *Activities) DeregisterWorkspaceDirectory(ctx context.Context, input *workspaces.DeregisterWorkspaceDirectoryInput) (*workspaces.DeregisterWorkspaceDirectoryOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeregisterWorkspaceDirectoryWithContext(ctx, input)
}

func (a *Activities) DescribeAccount(ctx context.Context, input *workspaces.DescribeAccountInput) (*workspaces.DescribeAccountOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeAccountWithContext(ctx, input)
}

func (a *Activities) DescribeAccountModifications(ctx context.Context, input *workspaces.DescribeAccountModificationsInput) (*workspaces.DescribeAccountModificationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeAccountModificationsWithContext(ctx, input)
}

func (a *Activities) DescribeClientProperties(ctx context.Context, input *workspaces.DescribeClientPropertiesInput) (*workspaces.DescribeClientPropertiesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeClientPropertiesWithContext(ctx, input)
}

func (a *Activities) DescribeConnectionAliasPermissions(ctx context.Context, input *workspaces.DescribeConnectionAliasPermissionsInput) (*workspaces.DescribeConnectionAliasPermissionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeConnectionAliasPermissionsWithContext(ctx, input)
}

func (a *Activities) DescribeConnectionAliases(ctx context.Context, input *workspaces.DescribeConnectionAliasesInput) (*workspaces.DescribeConnectionAliasesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeConnectionAliasesWithContext(ctx, input)
}

func (a *Activities) DescribeIpGroups(ctx context.Context, input *workspaces.DescribeIpGroupsInput) (*workspaces.DescribeIpGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeIpGroupsWithContext(ctx, input)
}

func (a *Activities) DescribeTags(ctx context.Context, input *workspaces.DescribeTagsInput) (*workspaces.DescribeTagsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeTagsWithContext(ctx, input)
}

func (a *Activities) DescribeWorkspaceBundles(ctx context.Context, input *workspaces.DescribeWorkspaceBundlesInput) (*workspaces.DescribeWorkspaceBundlesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeWorkspaceBundlesWithContext(ctx, input)
}

func (a *Activities) DescribeWorkspaceDirectories(ctx context.Context, input *workspaces.DescribeWorkspaceDirectoriesInput) (*workspaces.DescribeWorkspaceDirectoriesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeWorkspaceDirectoriesWithContext(ctx, input)
}

func (a *Activities) DescribeWorkspaceImagePermissions(ctx context.Context, input *workspaces.DescribeWorkspaceImagePermissionsInput) (*workspaces.DescribeWorkspaceImagePermissionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeWorkspaceImagePermissionsWithContext(ctx, input)
}

func (a *Activities) DescribeWorkspaceImages(ctx context.Context, input *workspaces.DescribeWorkspaceImagesInput) (*workspaces.DescribeWorkspaceImagesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeWorkspaceImagesWithContext(ctx, input)
}

func (a *Activities) DescribeWorkspaceSnapshots(ctx context.Context, input *workspaces.DescribeWorkspaceSnapshotsInput) (*workspaces.DescribeWorkspaceSnapshotsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeWorkspaceSnapshotsWithContext(ctx, input)
}

func (a *Activities) DescribeWorkspaces(ctx context.Context, input *workspaces.DescribeWorkspacesInput) (*workspaces.DescribeWorkspacesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeWorkspacesWithContext(ctx, input)
}

func (a *Activities) DescribeWorkspacesConnectionStatus(ctx context.Context, input *workspaces.DescribeWorkspacesConnectionStatusInput) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DescribeWorkspacesConnectionStatusWithContext(ctx, input)
}

func (a *Activities) DisassociateConnectionAlias(ctx context.Context, input *workspaces.DisassociateConnectionAliasInput) (*workspaces.DisassociateConnectionAliasOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisassociateConnectionAliasWithContext(ctx, input)
}

func (a *Activities) DisassociateIpGroups(ctx context.Context, input *workspaces.DisassociateIpGroupsInput) (*workspaces.DisassociateIpGroupsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DisassociateIpGroupsWithContext(ctx, input)
}

func (a *Activities) ImportWorkspaceImage(ctx context.Context, input *workspaces.ImportWorkspaceImageInput) (*workspaces.ImportWorkspaceImageOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ImportWorkspaceImageWithContext(ctx, input)
}

func (a *Activities) ListAvailableManagementCidrRanges(ctx context.Context, input *workspaces.ListAvailableManagementCidrRangesInput) (*workspaces.ListAvailableManagementCidrRangesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListAvailableManagementCidrRangesWithContext(ctx, input)
}

func (a *Activities) MigrateWorkspace(ctx context.Context, input *workspaces.MigrateWorkspaceInput) (*workspaces.MigrateWorkspaceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.MigrateWorkspaceWithContext(ctx, input)
}

func (a *Activities) ModifyAccount(ctx context.Context, input *workspaces.ModifyAccountInput) (*workspaces.ModifyAccountOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyAccountWithContext(ctx, input)
}

func (a *Activities) ModifyClientProperties(ctx context.Context, input *workspaces.ModifyClientPropertiesInput) (*workspaces.ModifyClientPropertiesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyClientPropertiesWithContext(ctx, input)
}

func (a *Activities) ModifySelfservicePermissions(ctx context.Context, input *workspaces.ModifySelfservicePermissionsInput) (*workspaces.ModifySelfservicePermissionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifySelfservicePermissionsWithContext(ctx, input)
}

func (a *Activities) ModifyWorkspaceAccessProperties(ctx context.Context, input *workspaces.ModifyWorkspaceAccessPropertiesInput) (*workspaces.ModifyWorkspaceAccessPropertiesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyWorkspaceAccessPropertiesWithContext(ctx, input)
}

func (a *Activities) ModifyWorkspaceCreationProperties(ctx context.Context, input *workspaces.ModifyWorkspaceCreationPropertiesInput) (*workspaces.ModifyWorkspaceCreationPropertiesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyWorkspaceCreationPropertiesWithContext(ctx, input)
}

func (a *Activities) ModifyWorkspaceProperties(ctx context.Context, input *workspaces.ModifyWorkspacePropertiesInput) (*workspaces.ModifyWorkspacePropertiesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyWorkspacePropertiesWithContext(ctx, input)
}

func (a *Activities) ModifyWorkspaceState(ctx context.Context, input *workspaces.ModifyWorkspaceStateInput) (*workspaces.ModifyWorkspaceStateOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ModifyWorkspaceStateWithContext(ctx, input)
}

func (a *Activities) RebootWorkspaces(ctx context.Context, input *workspaces.RebootWorkspacesInput) (*workspaces.RebootWorkspacesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RebootWorkspacesWithContext(ctx, input)
}

func (a *Activities) RebuildWorkspaces(ctx context.Context, input *workspaces.RebuildWorkspacesInput) (*workspaces.RebuildWorkspacesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RebuildWorkspacesWithContext(ctx, input)
}

func (a *Activities) RegisterWorkspaceDirectory(ctx context.Context, input *workspaces.RegisterWorkspaceDirectoryInput) (*workspaces.RegisterWorkspaceDirectoryOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RegisterWorkspaceDirectoryWithContext(ctx, input)
}

func (a *Activities) RestoreWorkspace(ctx context.Context, input *workspaces.RestoreWorkspaceInput) (*workspaces.RestoreWorkspaceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RestoreWorkspaceWithContext(ctx, input)
}

func (a *Activities) RevokeIpRules(ctx context.Context, input *workspaces.RevokeIpRulesInput) (*workspaces.RevokeIpRulesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RevokeIpRulesWithContext(ctx, input)
}

func (a *Activities) StartWorkspaces(ctx context.Context, input *workspaces.StartWorkspacesInput) (*workspaces.StartWorkspacesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StartWorkspacesWithContext(ctx, input)
}

func (a *Activities) StopWorkspaces(ctx context.Context, input *workspaces.StopWorkspacesInput) (*workspaces.StopWorkspacesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StopWorkspacesWithContext(ctx, input)
}

func (a *Activities) TerminateWorkspaces(ctx context.Context, input *workspaces.TerminateWorkspacesInput) (*workspaces.TerminateWorkspacesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.TerminateWorkspacesWithContext(ctx, input)
}

func (a *Activities) UpdateConnectionAliasPermission(ctx context.Context, input *workspaces.UpdateConnectionAliasPermissionInput) (*workspaces.UpdateConnectionAliasPermissionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateConnectionAliasPermissionWithContext(ctx, input)
}

func (a *Activities) UpdateRulesOfIpGroup(ctx context.Context, input *workspaces.UpdateRulesOfIpGroupInput) (*workspaces.UpdateRulesOfIpGroupOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateRulesOfIpGroupWithContext(ctx, input)
}

func (a *Activities) UpdateWorkspaceImagePermission(ctx context.Context, input *workspaces.UpdateWorkspaceImagePermissionInput) (*workspaces.UpdateWorkspaceImagePermissionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateWorkspaceImagePermissionWithContext(ctx, input)
}
