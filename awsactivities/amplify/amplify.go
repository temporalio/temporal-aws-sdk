// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package amplify

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/amplify"
	"github.com/aws/aws-sdk-go/service/amplify/amplifyiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client amplifyiface.AmplifyAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := amplify.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (amplifyiface.AmplifyAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return amplify.New(sess), nil
}

func (a *Activities) CreateApp(ctx context.Context, input *amplify.CreateAppInput) (*amplify.CreateAppOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateAppWithContext(ctx, input)
}

func (a *Activities) CreateBackendEnvironment(ctx context.Context, input *amplify.CreateBackendEnvironmentInput) (*amplify.CreateBackendEnvironmentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateBackendEnvironmentWithContext(ctx, input)
}

func (a *Activities) CreateBranch(ctx context.Context, input *amplify.CreateBranchInput) (*amplify.CreateBranchOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateBranchWithContext(ctx, input)
}

func (a *Activities) CreateDeployment(ctx context.Context, input *amplify.CreateDeploymentInput) (*amplify.CreateDeploymentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateDeploymentWithContext(ctx, input)
}

func (a *Activities) CreateDomainAssociation(ctx context.Context, input *amplify.CreateDomainAssociationInput) (*amplify.CreateDomainAssociationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateDomainAssociationWithContext(ctx, input)
}

func (a *Activities) CreateWebhook(ctx context.Context, input *amplify.CreateWebhookInput) (*amplify.CreateWebhookOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateWebhookWithContext(ctx, input)
}

func (a *Activities) DeleteApp(ctx context.Context, input *amplify.DeleteAppInput) (*amplify.DeleteAppOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteAppWithContext(ctx, input)
}

func (a *Activities) DeleteBackendEnvironment(ctx context.Context, input *amplify.DeleteBackendEnvironmentInput) (*amplify.DeleteBackendEnvironmentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteBackendEnvironmentWithContext(ctx, input)
}

func (a *Activities) DeleteBranch(ctx context.Context, input *amplify.DeleteBranchInput) (*amplify.DeleteBranchOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteBranchWithContext(ctx, input)
}

func (a *Activities) DeleteDomainAssociation(ctx context.Context, input *amplify.DeleteDomainAssociationInput) (*amplify.DeleteDomainAssociationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteDomainAssociationWithContext(ctx, input)
}

func (a *Activities) DeleteJob(ctx context.Context, input *amplify.DeleteJobInput) (*amplify.DeleteJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteJobWithContext(ctx, input)
}

func (a *Activities) DeleteWebhook(ctx context.Context, input *amplify.DeleteWebhookInput) (*amplify.DeleteWebhookOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteWebhookWithContext(ctx, input)
}

func (a *Activities) GenerateAccessLogs(ctx context.Context, input *amplify.GenerateAccessLogsInput) (*amplify.GenerateAccessLogsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GenerateAccessLogsWithContext(ctx, input)
}

func (a *Activities) GetApp(ctx context.Context, input *amplify.GetAppInput) (*amplify.GetAppOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetAppWithContext(ctx, input)
}

func (a *Activities) GetArtifactUrl(ctx context.Context, input *amplify.GetArtifactUrlInput) (*amplify.GetArtifactUrlOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetArtifactUrlWithContext(ctx, input)
}

func (a *Activities) GetBackendEnvironment(ctx context.Context, input *amplify.GetBackendEnvironmentInput) (*amplify.GetBackendEnvironmentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetBackendEnvironmentWithContext(ctx, input)
}

func (a *Activities) GetBranch(ctx context.Context, input *amplify.GetBranchInput) (*amplify.GetBranchOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetBranchWithContext(ctx, input)
}

func (a *Activities) GetDomainAssociation(ctx context.Context, input *amplify.GetDomainAssociationInput) (*amplify.GetDomainAssociationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetDomainAssociationWithContext(ctx, input)
}

func (a *Activities) GetJob(ctx context.Context, input *amplify.GetJobInput) (*amplify.GetJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetJobWithContext(ctx, input)
}

func (a *Activities) GetWebhook(ctx context.Context, input *amplify.GetWebhookInput) (*amplify.GetWebhookOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetWebhookWithContext(ctx, input)
}

func (a *Activities) ListApps(ctx context.Context, input *amplify.ListAppsInput) (*amplify.ListAppsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListAppsWithContext(ctx, input)
}

func (a *Activities) ListArtifacts(ctx context.Context, input *amplify.ListArtifactsInput) (*amplify.ListArtifactsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListArtifactsWithContext(ctx, input)
}

func (a *Activities) ListBackendEnvironments(ctx context.Context, input *amplify.ListBackendEnvironmentsInput) (*amplify.ListBackendEnvironmentsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListBackendEnvironmentsWithContext(ctx, input)
}

func (a *Activities) ListBranches(ctx context.Context, input *amplify.ListBranchesInput) (*amplify.ListBranchesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListBranchesWithContext(ctx, input)
}

func (a *Activities) ListDomainAssociations(ctx context.Context, input *amplify.ListDomainAssociationsInput) (*amplify.ListDomainAssociationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListDomainAssociationsWithContext(ctx, input)
}

func (a *Activities) ListJobs(ctx context.Context, input *amplify.ListJobsInput) (*amplify.ListJobsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListJobsWithContext(ctx, input)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *amplify.ListTagsForResourceInput) (*amplify.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTagsForResourceWithContext(ctx, input)
}

func (a *Activities) ListWebhooks(ctx context.Context, input *amplify.ListWebhooksInput) (*amplify.ListWebhooksOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListWebhooksWithContext(ctx, input)
}

func (a *Activities) StartDeployment(ctx context.Context, input *amplify.StartDeploymentInput) (*amplify.StartDeploymentOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StartDeploymentWithContext(ctx, input)
}

func (a *Activities) StartJob(ctx context.Context, input *amplify.StartJobInput) (*amplify.StartJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StartJobWithContext(ctx, input)
}

func (a *Activities) StopJob(ctx context.Context, input *amplify.StopJobInput) (*amplify.StopJobOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.StopJobWithContext(ctx, input)
}

func (a *Activities) TagResource(ctx context.Context, input *amplify.TagResourceInput) (*amplify.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.TagResourceWithContext(ctx, input)
}

func (a *Activities) UntagResource(ctx context.Context, input *amplify.UntagResourceInput) (*amplify.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UntagResourceWithContext(ctx, input)
}

func (a *Activities) UpdateApp(ctx context.Context, input *amplify.UpdateAppInput) (*amplify.UpdateAppOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateAppWithContext(ctx, input)
}

func (a *Activities) UpdateBranch(ctx context.Context, input *amplify.UpdateBranchInput) (*amplify.UpdateBranchOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateBranchWithContext(ctx, input)
}

func (a *Activities) UpdateDomainAssociation(ctx context.Context, input *amplify.UpdateDomainAssociationInput) (*amplify.UpdateDomainAssociationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateDomainAssociationWithContext(ctx, input)
}

func (a *Activities) UpdateWebhook(ctx context.Context, input *amplify.UpdateWebhookInput) (*amplify.UpdateWebhookOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UpdateWebhookWithContext(ctx, input)
}
