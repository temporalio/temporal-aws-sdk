// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

package sns

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/sns"
	"github.com/aws/aws-sdk-go/service/sns/snsiface"
	"go.temporal.io/aws-sdk/internal"
)

// ensure that imports are valid even if not used by the generated code
var _ = internal.SetClientToken

type _ request.Option

// SessionFactory returns an aws.Session based on the activity context.
type SessionFactory interface {
	Session(ctx context.Context) (*session.Session, error)
}

type Activities struct {
	client snsiface.SNSAPI

	sessionFactory SessionFactory
}

func NewActivities(sess *session.Session, config ...*aws.Config) *Activities {
	client := sns.New(sess, config...)
	return &Activities{client: client}
}

func NewActivitiesWithSessionFactory(sessionFactory SessionFactory) *Activities {
	return &Activities{sessionFactory: sessionFactory}
}

func (a *Activities) getClient(ctx context.Context) (snsiface.SNSAPI, error) {
	if a.client != nil { // No need to protect with mutex: we know the client never changes
		return a.client, nil
	}

	sess, err := a.sessionFactory.Session(ctx)
	if err != nil {
		return nil, err
	}

	return sns.New(sess), nil
}

func (a *Activities) AddPermission(ctx context.Context, input *sns.AddPermissionInput) (*sns.AddPermissionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.AddPermissionWithContext(ctx, input)
}

func (a *Activities) CheckIfPhoneNumberIsOptedOut(ctx context.Context, input *sns.CheckIfPhoneNumberIsOptedOutInput) (*sns.CheckIfPhoneNumberIsOptedOutOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CheckIfPhoneNumberIsOptedOutWithContext(ctx, input)
}

func (a *Activities) ConfirmSubscription(ctx context.Context, input *sns.ConfirmSubscriptionInput) (*sns.ConfirmSubscriptionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ConfirmSubscriptionWithContext(ctx, input)
}

func (a *Activities) CreatePlatformApplication(ctx context.Context, input *sns.CreatePlatformApplicationInput) (*sns.CreatePlatformApplicationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreatePlatformApplicationWithContext(ctx, input)
}

func (a *Activities) CreatePlatformEndpoint(ctx context.Context, input *sns.CreatePlatformEndpointInput) (*sns.CreatePlatformEndpointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreatePlatformEndpointWithContext(ctx, input)
}

func (a *Activities) CreateTopic(ctx context.Context, input *sns.CreateTopicInput) (*sns.CreateTopicOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.CreateTopicWithContext(ctx, input)
}

func (a *Activities) DeleteEndpoint(ctx context.Context, input *sns.DeleteEndpointInput) (*sns.DeleteEndpointOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteEndpointWithContext(ctx, input)
}

func (a *Activities) DeletePlatformApplication(ctx context.Context, input *sns.DeletePlatformApplicationInput) (*sns.DeletePlatformApplicationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeletePlatformApplicationWithContext(ctx, input)
}

func (a *Activities) DeleteTopic(ctx context.Context, input *sns.DeleteTopicInput) (*sns.DeleteTopicOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.DeleteTopicWithContext(ctx, input)
}

func (a *Activities) GetEndpointAttributes(ctx context.Context, input *sns.GetEndpointAttributesInput) (*sns.GetEndpointAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetEndpointAttributesWithContext(ctx, input)
}

func (a *Activities) GetPlatformApplicationAttributes(ctx context.Context, input *sns.GetPlatformApplicationAttributesInput) (*sns.GetPlatformApplicationAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetPlatformApplicationAttributesWithContext(ctx, input)
}

func (a *Activities) GetSMSAttributes(ctx context.Context, input *sns.GetSMSAttributesInput) (*sns.GetSMSAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetSMSAttributesWithContext(ctx, input)
}

func (a *Activities) GetSubscriptionAttributes(ctx context.Context, input *sns.GetSubscriptionAttributesInput) (*sns.GetSubscriptionAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetSubscriptionAttributesWithContext(ctx, input)
}

func (a *Activities) GetTopicAttributes(ctx context.Context, input *sns.GetTopicAttributesInput) (*sns.GetTopicAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.GetTopicAttributesWithContext(ctx, input)
}

func (a *Activities) ListEndpointsByPlatformApplication(ctx context.Context, input *sns.ListEndpointsByPlatformApplicationInput) (*sns.ListEndpointsByPlatformApplicationOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListEndpointsByPlatformApplicationWithContext(ctx, input)
}

func (a *Activities) ListPhoneNumbersOptedOut(ctx context.Context, input *sns.ListPhoneNumbersOptedOutInput) (*sns.ListPhoneNumbersOptedOutOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListPhoneNumbersOptedOutWithContext(ctx, input)
}

func (a *Activities) ListPlatformApplications(ctx context.Context, input *sns.ListPlatformApplicationsInput) (*sns.ListPlatformApplicationsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListPlatformApplicationsWithContext(ctx, input)
}

func (a *Activities) ListSubscriptions(ctx context.Context, input *sns.ListSubscriptionsInput) (*sns.ListSubscriptionsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListSubscriptionsWithContext(ctx, input)
}

func (a *Activities) ListSubscriptionsByTopic(ctx context.Context, input *sns.ListSubscriptionsByTopicInput) (*sns.ListSubscriptionsByTopicOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListSubscriptionsByTopicWithContext(ctx, input)
}

func (a *Activities) ListTagsForResource(ctx context.Context, input *sns.ListTagsForResourceInput) (*sns.ListTagsForResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTagsForResourceWithContext(ctx, input)
}

func (a *Activities) ListTopics(ctx context.Context, input *sns.ListTopicsInput) (*sns.ListTopicsOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.ListTopicsWithContext(ctx, input)
}

func (a *Activities) OptInPhoneNumber(ctx context.Context, input *sns.OptInPhoneNumberInput) (*sns.OptInPhoneNumberOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.OptInPhoneNumberWithContext(ctx, input)
}

func (a *Activities) Publish(ctx context.Context, input *sns.PublishInput) (*sns.PublishOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.PublishWithContext(ctx, input)
}

func (a *Activities) RemovePermission(ctx context.Context, input *sns.RemovePermissionInput) (*sns.RemovePermissionOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.RemovePermissionWithContext(ctx, input)
}

func (a *Activities) SetEndpointAttributes(ctx context.Context, input *sns.SetEndpointAttributesInput) (*sns.SetEndpointAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SetEndpointAttributesWithContext(ctx, input)
}

func (a *Activities) SetPlatformApplicationAttributes(ctx context.Context, input *sns.SetPlatformApplicationAttributesInput) (*sns.SetPlatformApplicationAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SetPlatformApplicationAttributesWithContext(ctx, input)
}

func (a *Activities) SetSMSAttributes(ctx context.Context, input *sns.SetSMSAttributesInput) (*sns.SetSMSAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SetSMSAttributesWithContext(ctx, input)
}

func (a *Activities) SetSubscriptionAttributes(ctx context.Context, input *sns.SetSubscriptionAttributesInput) (*sns.SetSubscriptionAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SetSubscriptionAttributesWithContext(ctx, input)
}

func (a *Activities) SetTopicAttributes(ctx context.Context, input *sns.SetTopicAttributesInput) (*sns.SetTopicAttributesOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SetTopicAttributesWithContext(ctx, input)
}

func (a *Activities) Subscribe(ctx context.Context, input *sns.SubscribeInput) (*sns.SubscribeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.SubscribeWithContext(ctx, input)
}

func (a *Activities) TagResource(ctx context.Context, input *sns.TagResourceInput) (*sns.TagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.TagResourceWithContext(ctx, input)
}

func (a *Activities) Unsubscribe(ctx context.Context, input *sns.UnsubscribeInput) (*sns.UnsubscribeOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UnsubscribeWithContext(ctx, input)
}

func (a *Activities) UntagResource(ctx context.Context, input *sns.UntagResourceInput) (*sns.UntagResourceOutput, error) {
	client, err := a.getClient(ctx)
	if err != nil {
		return nil, err
	}
	return client.UntagResourceWithContext(ctx, input)
}
